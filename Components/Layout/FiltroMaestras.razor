@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject IMaestra MaestraService

<RadzenRow class="rz-text-align-Left">

    <RadzenColumn>
        @if (pais == null)
        {
            <p><em>Cargando...</em></p>
        }
        else
        {
            <div class="rz-p-sm-2 rz-text-align-left">
                <RadzenLabel Text="Pais" />
                <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                TValue="int" Data=pais TextProperty="Pnombre" ValueProperty="IdPais" AllowClear="true" @bind-Value=valuepais Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@(args => SetEmpresa((int)args))">
                </RadzenDropDown>
            </div>

        }
    </RadzenColumn>

    <RadzenColumn>
        @if (valuepais > 0)
        {
            <div class="rz-p-sm-2 rz-text-align-left">
                <RadzenLabel Text="Empresa" />
                <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                TValue="int" Data=empresas TextProperty="Empresa" ValueProperty="IdEmpresa" AllowClear="true" @bind-Value=valueempresas Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@(args => SetCentros((int)args))">
                </RadzenDropDown>
            </div>
        }
        else if (empresas == null && valuepais > 0)
        {
            <p><em>Cargando...</em></p>
        }
        else
        {
            <p><em>Seleccione el País...</em></p>
        }
    </RadzenColumn>

    <RadzenColumn>
        @if (valueempresas > 0)
        {
            <div class="rz-p-sm-2 rz-text-align-left">
                <RadzenLabel Text="Centros" />
                <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                TValue="int" Data=centros TextProperty="Centro" ValueProperty="IdCentro" AllowClear="true" @bind-Value=valuecentros Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@(args => SetDivisiones((int)args))">
                </RadzenDropDown>
            </div>
        }
        else if (centros == null && valueempresas > 0)
        {
            <p><em>Cargando...</em></p>
        }
        else
        {
            <p><em>Seleccione una Empresa...</em></p>
        }
    </RadzenColumn>

    <RadzenColumn>
        @if (valuecentros > 0)
        {
            <div class="rz-p-sm-2 rz-text-align-left">
                <RadzenLabel Text="Division" />
                <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                TValue="int" Data=divisiones TextProperty="NDivision" ValueProperty="IdDivision" AllowClear="true" @bind-Value=valuedivision Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@(args => SetLineas((int)args))">
                </RadzenDropDown>
            </div>
        }
        else if (divisiones == null && valuecentros > 0)
        {
            <p><em>Cargando...</em></p>
        }
        else
        {
            <p><em>Seleccione un Centro...</em></p>
        }
    </RadzenColumn>

    <RadzenColumn>
        @if (valuedivision > 0)
        {
            <div class="rz-p-sm-2 rz-text-align-left">
                <RadzenLabel Text="Línea" />
                <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                TValue="int" Data=lineas TextProperty="Linea" ValueProperty="IdLinea" AllowClear="true" @bind-Value=valuelinea Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))">
                </RadzenDropDown>
            </div>
        }
        else if (divisiones == null && valuedivision > 0)
        {
            <p><em>Cargando...</em></p>
        }
        else
        {
            <p><em>Seleccione una División...</em></p>
        }
    </RadzenColumn>
    <RadzenColumn>
        <RadzenButton class="mt-4" ButtonType="ButtonType.Button" Variant="Variant.Outlined" Disabled="false" Text="Consultar" ButtonStyle="ButtonStyle.Success" Click=Set />

    </RadzenColumn>
</RadzenRow>

@code {
    [CascadingParameter]
    private List<Claim> claims { get; set; }

    public List<Pai> pais { get; set; }
    public List<EmpresasV> empresas { get; set; }
    public List<CentrosV> centros { get; set; }
    public List<DivisionesV> divisiones { get; set; }
    public List<LineaV> lineas { get; set; }

    [Parameter]
    public EventCallback<int> OnChangepais { get; set; }//funcion para  retornar en el componente Padre
    [Parameter]
    public int valuepais { get; set; }//parametro retornado en el componente Padre
    
    [Parameter]
    public EventCallback<int> OnChangeempresa { get; set; }
    [Parameter]
    public int valueempresas { get; set; }

    [Parameter]
    public EventCallback<int> OnChangecentros { get; set; }
    [Parameter]
    public int valuecentros { get; set; }
    
    [Parameter]
    public EventCallback<int> OnChangedivision { get; set; }
    [Parameter]
    public int valuedivision { get; set; }
    
    [Parameter]
    public EventCallback<int> OnChangelineas { get; set; }
    [Parameter]
    public int valuelinea { get; set; }

    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);

    }

    protected override async Task OnInitializedAsync()
    {

        await CreateData();

        if (claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value == "Admin")
        {

            pais = await MaestraService.GetPaises();
        }
    }

    private async Task SetEmpresa(int IdPais)
    {


        empresas = await MaestraService.GetEmpresas(IdPais);

    }
    private async Task SetCentros(int IdEmpresa)
    {


        centros = await MaestraService.GetCentros(IdEmpresa);

    }
    private async Task SetDivisiones(int IdCentro)
    {


        divisiones = await MaestraService.GetDivisiones(IdCentro);

    }
    private async Task SetLineas(int IdDivision)
    {


        lineas = await MaestraService.GetLineas(IdDivision);

    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }


    private async Task Set()
    {
        
        await OnChangepais.InvokeAsync(valuepais);
        await OnChangeempresa.InvokeAsync(valueempresas);
        await OnChangecentros.InvokeAsync(valuecentros);
        await OnChangedivision.InvokeAsync(valuedivision);
        await OnChangelineas.InvokeAsync(valuelinea);

    }
}
