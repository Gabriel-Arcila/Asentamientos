@inject IProductosVData ProductosVData
@inject ISeccionesVData SeccionesVData
<RadzenRow class="rz-text-align-right">
    <RadzenColumn Size="2">
        <div class="rz-text-align-left">
            <RadzenLabel Text="Productos" />
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                TValue="int" Data=productos TextProperty="Producto" ValueProperty="IdProducto" AllowClear="true" @bind-Value=idProducto Style="width: 100%; max-width: 350px;min-width: 90px;" Change="@(arg => Set())">
            </RadzenDropDown>
        </div>
    </RadzenColumn>
    <RadzenColumn Size="2">
        <div class="rz-text-align-left">
            <RadzenLabel Text="Secciones" />
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                TValue="int" Data=secciones TextProperty="Seccion" ValueProperty="IdSeccion" AllowClear="true" @bind-Value=idSeccion Style="width: 100%; max-width: 350px;min-width: 90px;" Change="@(arg => Set())">
            </RadzenDropDown>
        </div>
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter]
    public int idLinea { get; set; } = 0;
    [Parameter]
    public EventCallback<int> OnChangeProducto { get; set; }
    [Parameter]
    public EventCallback<int> OnChangeSeccion { get; set; }
    public int idProducto {get; set;} = 0;
    public int idSeccion {get; set;} = 0;
    List<ProductosV> productos = new List<ProductosV>();
    List<SeccionesV> secciones = new List<SeccionesV>();
    protected override async Task OnInitializedAsync()
    {
        if(idLinea != 0){
            productos = await ProductosVData.GetProductosPorLinea(idLinea);
            secciones = await SeccionesVData.GetSeccionesPorLinea(idLinea);
        }
    }
    public void searchTextChanged(string text)
    {
        StateHasChanged();
    }

    private async Task Set()
    {
        await OnChangeProducto.InvokeAsync(idProducto);
        await OnChangeSeccion.InvokeAsync(idSeccion);
    }

}