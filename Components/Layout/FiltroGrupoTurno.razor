@inject AuthenticationStateProvider AuthStateProvider
@inject IRotacionData RotacionData
@inject IRolLogic RolLogicService


@if(idEmpresa != 0){
    <RadzenRow class="rz-text-align-Left">
        <RadzenColumn Size="3">
            @if(turnos is not null){
                <div class="rz-p-sm-2 rz-text-align-left">
                    <RadzenLabel Text="Turno" />
                    <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="string" Data=@(turnos.Select(c => c.Value)) AllowClear="true" @bind-Value=turno Style="width: 100%; max-width: 350px;min-width: 90px;" Change="@(arg => Set())"
                            Disabled="@isDesactivado">
                    </RadzenDropDown>
                </div>
            }else{
                <CargandoSelect />
            }
        </RadzenColumn>
        <RadzenColumn Size="3">
            @if(grupos is not null){
                <div class="rz-p-sm-2 rz-text-align-left"> 
                    <RadzenLabel Text="Grupo" />
                    <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="string" Data=@(grupos.Select(c => c.Value)) AllowClear="true" @bind-Value=grupo Style="width: 100%; max-width: 350px;min-width: 90px;" Change="@(arg => Set())"
                            Disabled="@isDesactivado">
                    </RadzenDropDown>
                </div>
            }else{
                <CargandoSelect />
            }
        </RadzenColumn>
    </RadzenRow>
}

@code{
    [Parameter]
    public int idEmpresa {get; set;}  = 1;
    [Parameter]
    public EventCallback<string> OnChangeGrupo { get; set; }
    [Parameter]
    public EventCallback<string> OnChangeTurno { get; set; }
    [CascadingParameter]
    private IEnumerable<Claim>? claims { get; set; }
    public int valueEmpresa {get; set;}= 0;
    public string turno {get; set;}
    public string grupo {get; set;}
    public string rol {get; set;}
    public (int PAVECA, int CHEMPRO, int PANASA, int PAINSA) empresas = (PAVECA: 1,CHEMPRO: 2, PANASA: 3,PAINSA: 4);
    public readonly Dictionary<string,string> turnos = new Dictionary<string, string>{{"Primer_turno" ,"1"}, {"Segundo_turno", "2"}, {"Tercer_turno", "3"}};
    public readonly Dictionary<string,string> grupoPAVECA = new Dictionary<string, string>{{"GrupoA", "A"}, {"GrupoB", "B"},{"GrupoC", "C"},{"GrupoD", "D"}};
    public readonly Dictionary<string,string> grupoPAINSA = new Dictionary<string, string>{{"Grupo1", "1"}, {"Grupo2", "2"},{"Grupo3", "3"},{"Grupo4", "4"}};
    public readonly Dictionary<string,string> grupoPANASA = new Dictionary<string, string>{{"Grupo1", "0"}};
    public Dictionary<string,string>? grupos = new Dictionary<string, string>();
    public Dictionary<string, bool> acessos = new Dictionary<string, bool>();
    public RotaCalidum rotacion {get; set;} = new RotaCalidum();
    public bool isDesactivado {get; set;} = false;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        claims = user.Claims;
        rotacion = await RotacionData.GetRotacion(idEmpresa);
        rol = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value ?? "";
        if(rol != ""){
            acessos = RolLogicService.ListasRol(rol);
        }
    }
    protected override async Task OnParametersSetAsync(){
        if(idEmpresa != 0 && idEmpresa != valueEmpresa){
            valueEmpresa = idEmpresa;
            grupos = null;
            if(idEmpresa == empresas.PAVECA){
                grupos = grupoPAVECA.ToDictionary();
            }else if(idEmpresa == empresas.CHEMPRO){
                grupos = grupoPAVECA.ToDictionary();
            }else if(idEmpresa == empresas.PANASA){
                grupos = grupoPANASA.ToDictionary();
            }else if(idEmpresa == empresas.PAINSA){
                grupos = grupoPAINSA.ToDictionary();
            }else{
                grupos = grupoPAVECA.ToDictionary();
            }
            
            if(rotacion.Rcgrupo != null && !acessos["Centro"]){
                turno = rotacion.Rcturno.ToString();
                grupo = rotacion.Rcgrupo;
                isDesactivado = true;
                await this.Set();
            }
        }
        valueEmpresa = idEmpresa;
    }
    private async Task Set()
    {
        await OnChangeGrupo.InvokeAsync(grupo);
        await OnChangeTurno.InvokeAsync(turno);
    }
}