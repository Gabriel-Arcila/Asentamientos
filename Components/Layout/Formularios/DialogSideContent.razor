
<EditForm Model="corte" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="12">
            <RadzenStack>
                <RadzenFormField Text="Categoría">
                    <RadzenDropDown TValue="int" Data=@(categorias.Where(c=>c.Cnombre!="Sin Categorizar")) TextProperty="Cnombre" ValueProperty="IdCategori" @bind-Value=corte.IdCategori />
                </RadzenFormField>

                <RadzenFormField Text="Acción Correctiva" Visible=@(rol)>
                    <RadzenTextArea class="w-100 textarea" aria-label="TextArea" @bind-Value="corte.CdaccCorr" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeSM="12" Visible=@(rol)>
            <RadzenText>¿Se realizo la acción correctiva?</RadzenText>
            <RadzenSwitch @bind-Value=corte.CdisListo Change="Cambio" />@sino
        </RadzenColumn>
        @if (corte.CdisListo)
        {
            <RadzenColumn Size="12" SizeSM="12">
                <RadzenStack>
                    <RadzenFormField Text="Nuevo Valor">
                        @*  <RadzenNumeric Step="0.1"  @bind-Value="corte.Avalor"  Min="@Convert.ToDecimal(lmin)" Max="@Convert.ToDecimal(lmax)" /> *@
                        <RadzenNumeric Step="0.1" @bind-Value="corte.Avalor" />
                    </RadzenFormField>

                    <RadzenText Visible=limites TextStyle="TextStyle.Caption"> El valor debe estar entre @lmin y @lmax</RadzenText>
                        <RadzenFormField Text="Observación">
                            <RadzenTextArea class="w-100 textarea" aria-label="TextArea" @bind-Value="corte.Aobserv" />
                        </RadzenFormField>
                    </RadzenStack>
             </RadzenColumn>

        }
    </RadzenRow>

    <RadzenRow class="rz-pt-6 rz-pb-4">
        <RadzenButton Size="ButtonSize.Medium" ButtonType="ButtonType.Submit" Icon="playlist_add" ButtonStyle="ButtonStyle.Success" Text="Agregar" />
        <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Danger" Icon="close_fullscreen" Text="Cerrar" Click="@(_ => Service.CloseSide(null))" />
    </RadzenRow>

    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>
<style>
    /*Ajustar el tamaño del RadzenFormField*/
    .rz-textbox:focus ~ .rz-form-field-label,
    .rz-textarea:focus ~ .rz-form-field-label,
    .rz-spinner:focus-within ~ .rz-form-field-label,
    .rz-autocomplete:focus-within ~ .rz-form-field-label,
    .rz-textbox:not(:placeholder-shown) ~ .rz-form-field-label, :not(.rz-state-empty) ~ .rz-form-field-label,
    .rz-variant-filled .rz-textarea:focus ~ .rz-form-field-label,
    .rz-variant-flat .rz-textarea:focus ~ .rz-form-field-label,
    .rz-variant-filled :not(.rz-state-empty) ~ .rz-form-field-label,
    .rz-variant-flat :not(.rz-state-empty) ~ .rz-form-field-label, .rz-radio-button-list-vertical ~ .rz-form-field-label,
    .rz-radio-button-list-horizontal ~ .rz-form-field-label,
    .rz-checkbox-list-vertical ~ .rz-form-field-label,
    .rz-checkbox-list-horizontal ~ .rz-form-field-label,
    .rz-chkbox ~ .rz-form-field-label {
        background-color: var(--rz-form-field-label-floating-background-color);
        font-size: 1rem !important;
        padding-top: 0rem !important;
        color: black;
    }
</style>
@code {
    [Inject] DialogService Service { get; set; }
    [Parameter]
    public List<CategoriaDTO>? categorias { get; set; }
    [Parameter]
    public double lmin { get; set; }
    [Parameter]
    public double lmax { get; set; }
    [Parameter]
    public CorteDiscDTO corteparametro { get; set; }//en caso de edicion
    [Parameter]
    public bool rol { get; set; }//si el valor "cenro" es true, se muestra el formulario de plan de acción

    private bool IsValid;// aprobar validaciones
    private bool limites = false;// mensaje si el varlor esta fuera de rango
    private string sino = "No";
    DialogCorteDTO corte = new DialogCorteDTO();

    protected override async Task OnInitializedAsync()
    {
        //todo crear mapeo de dtos
        if (corteparametro.IdCategori > 0 || corteparametro.CdaccCorr == "Definir")
        {
            corte.IdCategori = corteparametro.IdCategori;
            corte.CdaccCorr = corteparametro.CdaccCorr;
            corte.CdisListo = corteparametro.CdisListo;

        }
        else
        {
            corte.IdCategori = categorias.First(c => c.Cnombre != "Sin Categorizar").IdCategori;
        }
    }


    private void OnValidSubmit()
    {
        IsValid = true;
        if (IsValid)
        {
            if (!corte.CdisListo)
            {
                Service.CloseSide(corte);
            }
            else
            {
                if (corte.Avalor <= lmax && corte.Avalor >= lmin)
                {
                    Service.CloseSide(corte);
                }
                else
                {
                    limites = true;
                }
            }

        }


    }
    private void OnInvalidSubmit()
    {
        IsValid = false;
    }

    private void Cambio()
    {
        sino = corte.CdisListo ? "Sí" : "No";
        corte.Avalor = lmin;
    }
}