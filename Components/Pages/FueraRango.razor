@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService tooltipService
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject INotifiRadzenServices NotifiRadzenServices
@inject ICorteDiscrepancia CorteDiscrepanciaDataService

@page "/fuerarango"

<FiltroMaestras OnChangepais="((int p) => this.valuepais = p)"
                OnChangeempresa="((int e) => this.valueempresa = e)"
                OnChangecentros="((int c) => this.valuecentros = c)"
                OnChangedivision="((int d) => this.valuedivision = d)"
                OnChangelineas="((int l) => this.valuelinea = l)" />

@*     Barra de filtro y opciones *@
@if (valuelinea > 0)
{
    <FiltrosAsentamientos idLinea="@valuelinea"
                          OnChangeClasificacion="((int idClasiVar) => this.idClasiVar = idClasiVar)"
                          OnChangeProducto="((int idProducto) => this.idProducto = idProducto)"
                          OnChangeSeccion="((int idSeccion) => this.idSeccion = idSeccion)" />
}
@if (idClasiVar > 0)
{
    <RadzenCard Variant="Variant.Filled" Class="rz-my-4 rz-mx-auto rz-background-color-base-50">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Normal" Wrap="FlexWrap.Wrap">

            
            
            <RadzenColumn class="rz-ml-7">
                <RadzenButton ButtonType="ButtonType.Button" Icon="search" Variant="Variant.Flat" Disabled="false" Text="Consultar" ButtonStyle="ButtonStyle.Success" Click=ConsultarAsentamientos />
            </RadzenColumn>

            @if (data == 1)
            {
                <RadzenColumn class="rz-ml-7">
                    <RadzenLabel Text="Mostrar todos" Component="allowVirtualization" />
                    <RadzenCheckBox @bind-Value="@allowVirtualization" Name="allowVirtualization" />
                </RadzenColumn>

                <RadzenColumn class="rz-ml-7">
                    <RadzenRow>
                        <RadzenText TextStyle="TextStyle.Caption"> Modo de registro:</RadzenText>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenSwitch @bind-Value=@ModoCorteValue Change="Cambio" />
                        <RadzenText TextStyle="TextStyle.Caption">@textModoCorteValue</RadzenText>
                        </RadzenRow>
                </RadzenColumn>
                
                <RadzenColumn class="rz-ml-7" Visible="@(ModoCorteValue)">
                    <RadzenButton ButtonType="ButtonType.Button" Icon="save_as" Variant="Variant.Flat" Disabled="false" Text="Guardar Lista" ButtonStyle="ButtonStyle.Primary" Click="AddListaCorteDiscrepancia" />
                </RadzenColumn>

            }

        </RadzenStack>
    </RadzenCard>
}
<RadzenDataList Visible="@(data==1)" Data="@ListaFueraRango" TItem="Asentum" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" PageSize="5" AllowVirtualization=@allowVirtualization WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)" Style="@(allowVirtualization ? "height:70%;overflow:auto;" : "")">
    <Template Context="lista">
        <RadzenCard Style="width: 100%; padding: 0;" Class="rz-shadow-2">
            <RadzenRow Gap="0" RowGap="0">
                <RadzenColumn Size="12" SizeLG="3" Class="@GetClass(lista)">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" class="rz-color-base-800">@(lista.IdRangoNavigation.IdVariableNavigation.IdSeccionNavigation.Snombre)</RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" class="rz-color-base-900">@(lista.IdRangoNavigation.IdVariableNavigation.Vnombre)</RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeLG="8" Class="@GetClassCorte(lista.CorteDis.Count)">
                    <RadzenRow Gap="0" RowGap="0">
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" Class="rz-mb-0 rz-color-base-800">Valor</RadzenText>
                            <RadzenText TextStyle="TextStyle.Subtitle1">@(lista.Avalor)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" Class="rz-mb-0 rz-color-base-800">@GetLabel(lista)</RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle1">@GetValue(lista)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" Class="rz-mb-0 rz-color-base-800">Valor Obj.</RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle1">@(lista.IdRangoNavigation.Robj)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6" SizeLG="3" Class="rz-text-align-start rz-text-align-lg-center">
                                <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Light" class="unidad-badge" Text=@($"{lista.IdRangoNavigation.IdVariableNavigation.IdUnidadNavigation.Unombre}") />
                            </RadzenColumn>

                            @if (lista.CorteDis.Count > 0)
                        {

                            <RadzenColumn Size="12" SizeMD="4" SizeLG="2">
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" Class="rz-mb-0 rz-color-base-800">Categoria</RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto">@(categorias.First(c => c.IdCategori == lista.CorteDis.First().IdCategori).Cnombre)</RadzenText>
                            </RadzenColumn>

                            <RadzenColumn Size="12" SizeMD="8" SizeLG="10">
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H6" Class="rz-mb-0 rz-color-base-800">Acción</RadzenText>
                                <RadzenText>@(lista.CorteDis.First().CdaccCorr)</RadzenText>
                            </RadzenColumn>

                        }
                    </RadzenRow>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeLG="1" Class="rz-p-4">
                    @if (lista.CorteDis.Count == 0)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Success" class="rz-border-radius-8 rz-my-auto" Icon="add_circle_outline"
                                      MouseEnter="@((args) => tooltipService.OpenOnTheTop(args, "Crear Corte",new TooltipOptions{ Duration=1000}))"
                                      Size="ButtonSize.Medium" Style="width: 100%; " Click=@( () => ShowDialog(lista) ) />

                    }
                    else
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" class="rz-border-radius-8" Icon="assignment_late"
                                      MouseEnter="@((args) => tooltipService.OpenOnTheTop(args, "Editar Corte",new TooltipOptions{  Duration=1000}))"
                                      Size="ButtonSize.Medium" Style="width: 100%" Click=@( () => ShowDialog(lista) ) />

                    }
                </RadzenColumn>

            </RadzenRow>
        </RadzenCard>
    </Template>
</RadzenDataList>

<RadzenText Visible="@(data==2)">
    <RadzenIcon Icon="warning" IconColor="@Colors.Warning" />
    No hay datos...
</RadzenText>

@if (loading)
{
    <Load />
}






@code {
    [CascadingParameter]
    private IEnumerable<Claim>? claims { get; set; }

    private List<Asentum>? ListaFueraRango { get; set; } = new List<Asentum>();
    public List<CorteDiscDTO>? cortes { get; set; } = new List<CorteDiscDTO>();
    private List<CategoriaDTO>? categorias { get; set; }

    bool allowVirtualization = false; //renderizado y paginacion de los datos mostrados del datalist
    bool ModoCorteValue { get; set; } //Carga individula o cargar con  listas el corte
    bool loading = false; //motrar loading
    int data = 0; //1-motrar tabla de datos 2-no haydata

    string? textModoCorteValue { get; set; } //texto de value para modo de registro de cortes


    //parametros retornado en el componente Hijo FiltroMaestra
    public int valuepais { get; set; } = 0;
    public int valueempresa { get; set; } = 0;
    public int valuecentros { get; set; } = 0;
    public int valuedivision { get; set; } = 0;
    public int valuelinea { get; set; } = 0;

    //parametros retornado en el componente Hijo FiltroAsentamientos
    public int idClasiVar { get; set; } = 0;
    public int idSeccion { get; set; } = 0;
    public int idProducto { get; set; } = 0;

    //TODO: Crear registro de corte y filtros de consulta por fecha
    //string fecha1 = DateTime.Now.Date.ToString("yyyy-MM-dd");
    string fecha1 = "2024-01-03";


    protected override async Task OnInitializedAsync()
    {
        await CreateData();
        await GetCategorias();
        textModoCorteValue = await LocalStorage.GetItemAsStringAsync("ModoCorteValue");
        if (string.IsNullOrEmpty(textModoCorteValue))
        {
            textModoCorteValue = "Individual";
            ModoCorteValue = false;
            await LocalStorage.SetItemAsync("ModoCorteValue", textModoCorteValue);
        }
        else if (textModoCorteValue == "Individual")
        {
            ModoCorteValue = false;
        }
        else
        {
            ModoCorteValue = true;

        }
    }

    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
        }
    }

    public async Task ConsultarAsentamientos()
    {
        data = 0;
        loading = true;
        ListaFueraRango = await CorteDiscrepanciaDataService.GetAsentamientosFueraRango("1", fecha1, 1);
        data = ListaFueraRango.Count > 0 ? 1 : 2;
        loading = false;
        NotificationService.Notify(NotifiRadzenServices.Notificacion("info", "", "Consulta Exitosa"));

    }

    async Task ShowDialog(Asentum asentamiento)
    {

        DialogCorteDTO cortedialog = new DialogCorteDTO();
        CorteDi corte = new CorteDi();
        Asentum asentamientoNuevo = new Asentum();

        cortedialog = await DialogService.OpenSideAsync<DialogSideContent>(
           $"Registrar Corte: {asentamiento.IdRangoNavigation.IdVariableNavigation.Vnombre}",
           parameters: new Dictionary<string, object?>()
                {
                { "categorias", categorias },
                { "lmin",asentamiento.IdRangoNavigation.Rmin },
                {"lmax",asentamiento.IdRangoNavigation.Rmax}
                },
           options: new SideDialogOptions
               { Position = DialogPosition.Right, ShowMask = true, CloseDialogOnOverlayClick = false });

        if (cortedialog is not null)
        {
            if (cortedialog.CdisListo)
            {
                //crear nuevo asentamiento
                asentamientoNuevo.IdInfoAse = asentamiento.IdInfoAse;
                asentamientoNuevo.IdRango = asentamiento.IdRango;
                asentamientoNuevo.IdRango = asentamiento.IdRango;
                asentamientoNuevo.Avalor = cortedialog.Avalor;
                asentamientoNuevo.AisActivo = true;
                
                ListaFueraRango.Add(asentamientoNuevo);



            }   
                //Registrar el corte desde el dto del dialog y el id del asentamiento
                corte.IdAsenta = asentamiento.IdAsenta;
                corte.IdCategori = cortedialog.IdCategori;
                corte.CdaccCorr = cortedialog.CdaccCorr;
                corte.CdisListo = cortedialog.CdisListo;

            if (ModoCorteValue)
            {

                
                ListaFueraRango.First(a => a.IdAsenta == asentamiento.IdAsenta).AisActivo = false;

                //Si se edita el corte se vuelve elimina de la lista.
                if (ListaFueraRango.First(a => a.IdAsenta == asentamiento.IdAsenta).CorteDis.Count > 0)
                {
                    ListaFueraRango.First(a => a.IdAsenta == asentamiento.IdAsenta).CorteDis.Clear();
                }

                ListaFueraRango.First(a => a.IdAsenta == asentamiento.IdAsenta).CorteDis.Add(corte);
            }
            else
            {
                //cortes.Add(corte);
                await ConsultarAsentamientos();
            }



        }

    }
    private async Task Cambio()
    {
        
        if (textModoCorteValue == "Cargar lista total" && !ModoCorteValue)
        {
            if (ListaFueraRango.Any(c => c.CorteDis.Count > 0))
            {
                var result = await DialogService.Confirm("Confirmación",
                "Si cambia el modo de registro a individual, se eliminarán los registros cargados. ¿Está seguro/a?",
                new ConfirmOptions()
                    {
                        OkButtonText = "Confirmar",
                        CancelButtonText = "Cancelar",
                        ShowClose = false,

                    }

                );
                if (!result.Value)
                {
                    ModoCorteValue = true;
                }

            }

        }
        else
        {
            ModoCorteValue = true;
        }
        textModoCorteValue = ModoCorteValue ? "Cargar lista total" : "Indivudal";
        await LocalStorage.SetItemAsync("ModoCorteValue", textModoCorteValue);
    }



    protected async Task GetCategorias()
    {
        categorias = await CorteDiscrepanciaDataService.GetCategorias();
    }

    public async Task AddListaCorteDiscrepancia()
    {
        //TODO:Verficar funcionamiento 
        bool cargar = true;
        foreach(var a in ListaFueraRango.Where(a=>a.IdAsenta>0))
        {
            if(a.CorteDis is null)
            {
                cargar = false;
                break;
            }
        }
        if(cargar)
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("exito", "", "Registro Exitoso"));
        }
        else
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "Atención", "No se han llenado todos los asentamientos fuera de rango"));
        }


    }

    public async Task SaveCorteDiscrepancia()
    {
        var result = await CorteDiscrepanciaDataService.AddCortesDiscrepancias(cortes);
        if (result is bool && (bool)result)
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("exito", "", "Registro Exitoso"));
        }
        else if (result is string)
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "Atención", $"Error: {result}"));
        }
    }


    //retornar Clases
    string GetClass(Asentum lista)
    {
        return lista.Avalor > lista.IdRangoNavigation.Rmax ? "rz-p-4 variableMax" : "rz-p-4 variableMin";
    }

    string GetLabel(Asentum lista)
    {
        return lista.Avalor > lista.IdRangoNavigation.Rmax ? "Valor Max." : "Valor Min.";
    }

    double GetValue(Asentum lista)
    {
        return lista.Avalor > lista.IdRangoNavigation.Rmax ? lista.IdRangoNavigation.Rmax : lista.IdRangoNavigation.Rmin;
    }

    string GetClassCorte(int valor)
    {
        return valor > 0 ? "rz-p-4 cortecargado" : "rz-p-4 ";
        //return "rz-p-4 ";
    }


}

